/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.amf.registration.model.impl;

import com.liferay.amf.registration.model.UserCustom;
import com.liferay.amf.registration.model.UserCustomModel;
import com.liferay.amf.registration.model.UserCustomSoap;
import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the UserCustom service. Represents a row in the &quot;AMF_REGISTRATION_UserCustom&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>UserCustomModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link UserCustomImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see UserCustomImpl
 * @generated
 */
@JSON(strict = true)
public class UserCustomModelImpl
	extends BaseModelImpl<UserCustom> implements UserCustomModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a user custom model instance should use the <code>UserCustom</code> interface instead.
	 */
	public static final String TABLE_NAME = "AMF_REGISTRATION_UserCustom";

	public static final Object[][] TABLE_COLUMNS = {
		{"userCustomId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"male", Types.BOOLEAN},
		{"homePhone", Types.VARCHAR}, {"mobilePhone", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("userCustomId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("male", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("homePhone", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("mobilePhone", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table AMF_REGISTRATION_UserCustom (userCustomId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,male BOOLEAN,homePhone VARCHAR(75) null,mobilePhone VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP =
		"drop table AMF_REGISTRATION_UserCustom";

	public static final String ORDER_BY_JPQL =
		" ORDER BY userCustom.userCustomId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY AMF_REGISTRATION_UserCustom.userCustomId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static UserCustom toModel(UserCustomSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		UserCustom model = new UserCustomImpl();

		model.setUserCustomId(soapModel.getUserCustomId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setMale(soapModel.isMale());
		model.setHomePhone(soapModel.getHomePhone());
		model.setMobilePhone(soapModel.getMobilePhone());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<UserCustom> toModels(UserCustomSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<UserCustom> models = new ArrayList<UserCustom>(soapModels.length);

		for (UserCustomSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public UserCustomModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _userCustomId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setUserCustomId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _userCustomId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return UserCustom.class;
	}

	@Override
	public String getModelClassName() {
		return UserCustom.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<UserCustom, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<UserCustom, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<UserCustom, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((UserCustom)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<UserCustom, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<UserCustom, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(UserCustom)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<UserCustom, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<UserCustom, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, UserCustom>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			UserCustom.class.getClassLoader(), UserCustom.class,
			ModelWrapper.class);

		try {
			Constructor<UserCustom> constructor =
				(Constructor<UserCustom>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<UserCustom, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<UserCustom, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<UserCustom, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<UserCustom, Object>>();
		Map<String, BiConsumer<UserCustom, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<UserCustom, ?>>();

		attributeGetterFunctions.put(
			"userCustomId", UserCustom::getUserCustomId);
		attributeSetterBiConsumers.put(
			"userCustomId",
			(BiConsumer<UserCustom, Long>)UserCustom::setUserCustomId);
		attributeGetterFunctions.put("groupId", UserCustom::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId", (BiConsumer<UserCustom, Long>)UserCustom::setGroupId);
		attributeGetterFunctions.put("companyId", UserCustom::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<UserCustom, Long>)UserCustom::setCompanyId);
		attributeGetterFunctions.put("userId", UserCustom::getUserId);
		attributeSetterBiConsumers.put(
			"userId", (BiConsumer<UserCustom, Long>)UserCustom::setUserId);
		attributeGetterFunctions.put("userName", UserCustom::getUserName);
		attributeSetterBiConsumers.put(
			"userName",
			(BiConsumer<UserCustom, String>)UserCustom::setUserName);
		attributeGetterFunctions.put("createDate", UserCustom::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<UserCustom, Date>)UserCustom::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", UserCustom::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<UserCustom, Date>)UserCustom::setModifiedDate);
		attributeGetterFunctions.put("male", UserCustom::getMale);
		attributeSetterBiConsumers.put(
			"male", (BiConsumer<UserCustom, Boolean>)UserCustom::setMale);
		attributeGetterFunctions.put("homePhone", UserCustom::getHomePhone);
		attributeSetterBiConsumers.put(
			"homePhone",
			(BiConsumer<UserCustom, String>)UserCustom::setHomePhone);
		attributeGetterFunctions.put("mobilePhone", UserCustom::getMobilePhone);
		attributeSetterBiConsumers.put(
			"mobilePhone",
			(BiConsumer<UserCustom, String>)UserCustom::setMobilePhone);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getUserCustomId() {
		return _userCustomId;
	}

	@Override
	public void setUserCustomId(long userCustomId) {
		_userCustomId = userCustomId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public boolean getMale() {
		return _male;
	}

	@JSON
	@Override
	public boolean isMale() {
		return _male;
	}

	@Override
	public void setMale(boolean male) {
		_male = male;
	}

	@JSON
	@Override
	public String getHomePhone() {
		if (_homePhone == null) {
			return "";
		}
		else {
			return _homePhone;
		}
	}

	@Override
	public void setHomePhone(String homePhone) {
		_homePhone = homePhone;
	}

	@JSON
	@Override
	public String getMobilePhone() {
		if (_mobilePhone == null) {
			return "";
		}
		else {
			return _mobilePhone;
		}
	}

	@Override
	public void setMobilePhone(String mobilePhone) {
		_mobilePhone = mobilePhone;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), UserCustom.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public UserCustom toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, UserCustom>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		UserCustomImpl userCustomImpl = new UserCustomImpl();

		userCustomImpl.setUserCustomId(getUserCustomId());
		userCustomImpl.setGroupId(getGroupId());
		userCustomImpl.setCompanyId(getCompanyId());
		userCustomImpl.setUserId(getUserId());
		userCustomImpl.setUserName(getUserName());
		userCustomImpl.setCreateDate(getCreateDate());
		userCustomImpl.setModifiedDate(getModifiedDate());
		userCustomImpl.setMale(isMale());
		userCustomImpl.setHomePhone(getHomePhone());
		userCustomImpl.setMobilePhone(getMobilePhone());

		userCustomImpl.resetOriginalValues();

		return userCustomImpl;
	}

	@Override
	public int compareTo(UserCustom userCustom) {
		long primaryKey = userCustom.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof UserCustom)) {
			return false;
		}

		UserCustom userCustom = (UserCustom)obj;

		long primaryKey = userCustom.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		UserCustomModelImpl userCustomModelImpl = this;

		userCustomModelImpl._setModifiedDate = false;
	}

	@Override
	public CacheModel<UserCustom> toCacheModel() {
		UserCustomCacheModel userCustomCacheModel = new UserCustomCacheModel();

		userCustomCacheModel.userCustomId = getUserCustomId();

		userCustomCacheModel.groupId = getGroupId();

		userCustomCacheModel.companyId = getCompanyId();

		userCustomCacheModel.userId = getUserId();

		userCustomCacheModel.userName = getUserName();

		String userName = userCustomCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			userCustomCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			userCustomCacheModel.createDate = createDate.getTime();
		}
		else {
			userCustomCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			userCustomCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			userCustomCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		userCustomCacheModel.male = isMale();

		userCustomCacheModel.homePhone = getHomePhone();

		String homePhone = userCustomCacheModel.homePhone;

		if ((homePhone != null) && (homePhone.length() == 0)) {
			userCustomCacheModel.homePhone = null;
		}

		userCustomCacheModel.mobilePhone = getMobilePhone();

		String mobilePhone = userCustomCacheModel.mobilePhone;

		if ((mobilePhone != null) && (mobilePhone.length() == 0)) {
			userCustomCacheModel.mobilePhone = null;
		}

		return userCustomCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<UserCustom, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<UserCustom, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<UserCustom, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((UserCustom)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<UserCustom, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<UserCustom, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<UserCustom, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((UserCustom)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, UserCustom>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private long _userCustomId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private boolean _male;
	private String _homePhone;
	private String _mobilePhone;
	private UserCustom _escapedModel;

}