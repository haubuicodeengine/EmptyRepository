/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.practice.course.management.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.LocaleException;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.LocaleUtil;
import com.liferay.portal.kernel.util.LocalizationUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.Validator;
import com.liferay.practice.course.management.model.Course;
import com.liferay.practice.course.management.model.CourseModel;
import com.liferay.practice.course.management.model.CourseSoap;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Course service. Represents a row in the
 * &quot;CourseManagement_Course&quot; database table, with each column mapped
 * to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>CourseModel</code>
 * exist only as a container for the default property accessors generated by
 * ServiceBuilder. Helper methods and all application logic should be put in
 * {@link CourseImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see CourseImpl
 * @generated
 */
@JSON(strict = true)
public class CourseModelImpl extends BaseModelImpl<Course> implements CourseModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a
	 * course model instance should use the <code>Course</code> interface instead.
	 */
	public static final String TABLE_NAME = "CourseManagement_Course";

	public static final Object[][] TABLE_COLUMNS = { { "courseId", Types.BIGINT }, { "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT }, { "userId", Types.BIGINT }, { "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP }, { "modifiedDate", Types.TIMESTAMP }, { "courseName", Types.VARCHAR },
			{ "lecturer", Types.VARCHAR }, { "description", Types.VARCHAR }, { "duration", Types.BIGINT },
			{ "courseStatus", Types.INTEGER } };

	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("courseId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("courseName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("lecturer", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("description", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("duration", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("courseStatus", Types.INTEGER);
	}

	public static final String TABLE_SQL_CREATE = "create table CourseManagement_Course (courseId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,courseName STRING null,lecturer STRING null,description STRING null,duration LONG,courseStatus INTEGER)";

	public static final String TABLE_SQL_DROP = "drop table CourseManagement_Course";

	public static final String ORDER_BY_JPQL = " ORDER BY course.courseName ASC";

	public static final String ORDER_BY_SQL = " ORDER BY CourseManagement_Course.courseName ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long GROUPID_COLUMN_BITMASK = 1L;

	public static final long COURSENAME_COLUMN_BITMASK = 2L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Course toModel(CourseSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Course model = new CourseImpl();

		model.setCourseId(soapModel.getCourseId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setCourseName(soapModel.getCourseName());
		model.setLecturer(soapModel.getLecturer());
		model.setDescription(soapModel.getDescription());
		model.setDuration(soapModel.getDuration());
		model.setCourseStatus(soapModel.getCourseStatus());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Course> toModels(CourseSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Course> models = new ArrayList<Course>(soapModels.length);

		for (CourseSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public CourseModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _courseId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setCourseId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _courseId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long) primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Course.class;
	}

	@Override
	public String getModelClassName() {
		return Course.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Course, Object>> attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Course, Object>> entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Course, Object> attributeGetterFunction = entry.getValue();

			attributes.put(attributeName, attributeGetterFunction.apply((Course) this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Course, Object>> attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Course, Object> attributeSetterBiConsumer = attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept((Course) this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Course, Object>> getAttributeGetterFunctions() {
		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Course, Object>> getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, Course> _getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(Course.class.getClassLoader(), Course.class, ModelWrapper.class);

		try {
			Constructor<Course> constructor = (Constructor<Course>) proxyClass.getConstructor(InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				} catch (ReflectiveOperationException reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		} catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<Course, Object>> _attributeGetterFunctions;
	private static final Map<String, BiConsumer<Course, Object>> _attributeSetterBiConsumers;

	static {
		Map<String, Function<Course, Object>> attributeGetterFunctions = new LinkedHashMap<String, Function<Course, Object>>();
		Map<String, BiConsumer<Course, ?>> attributeSetterBiConsumers = new LinkedHashMap<String, BiConsumer<Course, ?>>();

		attributeGetterFunctions.put("courseId", Course::getCourseId);
		attributeSetterBiConsumers.put("courseId", (BiConsumer<Course, Long>) Course::setCourseId);
		attributeGetterFunctions.put("groupId", Course::getGroupId);
		attributeSetterBiConsumers.put("groupId", (BiConsumer<Course, Long>) Course::setGroupId);
		attributeGetterFunctions.put("companyId", Course::getCompanyId);
		attributeSetterBiConsumers.put("companyId", (BiConsumer<Course, Long>) Course::setCompanyId);
		attributeGetterFunctions.put("userId", Course::getUserId);
		attributeSetterBiConsumers.put("userId", (BiConsumer<Course, Long>) Course::setUserId);
		attributeGetterFunctions.put("userName", Course::getUserName);
		attributeSetterBiConsumers.put("userName", (BiConsumer<Course, String>) Course::setUserName);
		attributeGetterFunctions.put("createDate", Course::getCreateDate);
		attributeSetterBiConsumers.put("createDate", (BiConsumer<Course, Date>) Course::setCreateDate);
		attributeGetterFunctions.put("modifiedDate", Course::getModifiedDate);
		attributeSetterBiConsumers.put("modifiedDate", (BiConsumer<Course, Date>) Course::setModifiedDate);
		attributeGetterFunctions.put("courseName", Course::getCourseName);
		attributeSetterBiConsumers.put("courseName", (BiConsumer<Course, String>) Course::setCourseName);
		attributeGetterFunctions.put("lecturer", Course::getLecturer);
		attributeSetterBiConsumers.put("lecturer", (BiConsumer<Course, String>) Course::setLecturer);
		attributeGetterFunctions.put("description", Course::getDescription);
		attributeSetterBiConsumers.put("description", (BiConsumer<Course, String>) Course::setDescription);
		attributeGetterFunctions.put("duration", Course::getDuration);
		attributeSetterBiConsumers.put("duration", (BiConsumer<Course, Long>) Course::setDuration);
		attributeGetterFunctions.put("courseStatus", Course::getCourseStatus);
		attributeSetterBiConsumers.put("courseStatus", (BiConsumer<Course, Integer>) Course::setCourseStatus);

		_attributeGetterFunctions = Collections.unmodifiableMap(attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap((Map) attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getCourseId() {
		return _courseId;
	}

	@Override
	public void setCourseId(long courseId) {
		_courseId = courseId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		} catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		} else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getCourseName() {
		if (_courseName == null) {
			return "";
		} else {
			return _courseName;
		}
	}

	@Override
	public String getCourseName(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getCourseName(languageId);
	}

	@Override
	public String getCourseName(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getCourseName(languageId, useDefault);
	}

	@Override
	public String getCourseName(String languageId) {
		return LocalizationUtil.getLocalization(getCourseName(), languageId);
	}

	@Override
	public String getCourseName(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(getCourseName(), languageId, useDefault);
	}

	@Override
	public String getCourseNameCurrentLanguageId() {
		return _courseNameCurrentLanguageId;
	}

	@JSON
	@Override
	public String getCourseNameCurrentValue() {
		Locale locale = getLocale(_courseNameCurrentLanguageId);

		return getCourseName(locale);
	}

	@Override
	public Map<Locale, String> getCourseNameMap() {
		return LocalizationUtil.getLocalizationMap(getCourseName());
	}

	@Override
	public void setCourseName(String courseName) {
		_columnBitmask = -1L;

		_courseName = courseName;
	}

	@Override
	public void setCourseName(String courseName, Locale locale) {
		setCourseName(courseName, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setCourseName(String courseName, Locale locale, Locale defaultLocale) {

		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(courseName)) {
			setCourseName(LocalizationUtil.updateLocalization(getCourseName(), "CourseName", courseName, languageId,
					defaultLanguageId));
		} else {
			setCourseName(LocalizationUtil.removeLocalization(getCourseName(), "CourseName", languageId));
		}
	}

	@Override
	public void setCourseNameCurrentLanguageId(String languageId) {
		_courseNameCurrentLanguageId = languageId;
	}

	@Override
	public void setCourseNameMap(Map<Locale, String> courseNameMap) {
		setCourseNameMap(courseNameMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setCourseNameMap(Map<Locale, String> courseNameMap, Locale defaultLocale) {

		if (courseNameMap == null) {
			return;
		}

		setCourseName(LocalizationUtil.updateLocalization(courseNameMap, getCourseName(), "CourseName",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getLecturer() {
		if (_lecturer == null) {
			return "";
		} else {
			return _lecturer;
		}
	}

	@Override
	public String getLecturer(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getLecturer(languageId);
	}

	@Override
	public String getLecturer(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getLecturer(languageId, useDefault);
	}

	@Override
	public String getLecturer(String languageId) {
		return LocalizationUtil.getLocalization(getLecturer(), languageId);
	}

	@Override
	public String getLecturer(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(getLecturer(), languageId, useDefault);
	}

	@Override
	public String getLecturerCurrentLanguageId() {
		return _lecturerCurrentLanguageId;
	}

	@JSON
	@Override
	public String getLecturerCurrentValue() {
		Locale locale = getLocale(_lecturerCurrentLanguageId);

		return getLecturer(locale);
	}

	@Override
	public Map<Locale, String> getLecturerMap() {
		return LocalizationUtil.getLocalizationMap(getLecturer());
	}

	@Override
	public void setLecturer(String lecturer) {
		_lecturer = lecturer;
	}

	@Override
	public void setLecturer(String lecturer, Locale locale) {
		setLecturer(lecturer, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setLecturer(String lecturer, Locale locale, Locale defaultLocale) {

		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(lecturer)) {
			setLecturer(LocalizationUtil.updateLocalization(getLecturer(), "Lecturer", lecturer, languageId,
					defaultLanguageId));
		} else {
			setLecturer(LocalizationUtil.removeLocalization(getLecturer(), "Lecturer", languageId));
		}
	}

	@Override
	public void setLecturerCurrentLanguageId(String languageId) {
		_lecturerCurrentLanguageId = languageId;
	}

	@Override
	public void setLecturerMap(Map<Locale, String> lecturerMap) {
		setLecturerMap(lecturerMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setLecturerMap(Map<Locale, String> lecturerMap, Locale defaultLocale) {

		if (lecturerMap == null) {
			return;
		}

		setLecturer(LocalizationUtil.updateLocalization(lecturerMap, getLecturer(), "Lecturer",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getDescription() {
		if (_description == null) {
			return "";
		} else {
			return _description;
		}
	}

	@Override
	public String getDescription(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getDescription(languageId);
	}

	@Override
	public String getDescription(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getDescription(languageId, useDefault);
	}

	@Override
	public String getDescription(String languageId) {
		return LocalizationUtil.getLocalization(getDescription(), languageId);
	}

	@Override
	public String getDescription(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(getDescription(), languageId, useDefault);
	}

	@Override
	public String getDescriptionCurrentLanguageId() {
		return _descriptionCurrentLanguageId;
	}

	@JSON
	@Override
	public String getDescriptionCurrentValue() {
		Locale locale = getLocale(_descriptionCurrentLanguageId);

		return getDescription(locale);
	}

	@Override
	public Map<Locale, String> getDescriptionMap() {
		return LocalizationUtil.getLocalizationMap(getDescription());
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@Override
	public void setDescription(String description, Locale locale) {
		setDescription(description, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setDescription(String description, Locale locale, Locale defaultLocale) {

		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(description)) {
			setDescription(LocalizationUtil.updateLocalization(getDescription(), "Description", description, languageId,
					defaultLanguageId));
		} else {
			setDescription(LocalizationUtil.removeLocalization(getDescription(), "Description", languageId));
		}
	}

	@Override
	public void setDescriptionCurrentLanguageId(String languageId) {
		_descriptionCurrentLanguageId = languageId;
	}

	@Override
	public void setDescriptionMap(Map<Locale, String> descriptionMap) {
		setDescriptionMap(descriptionMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setDescriptionMap(Map<Locale, String> descriptionMap, Locale defaultLocale) {

		if (descriptionMap == null) {
			return;
		}

		setDescription(LocalizationUtil.updateLocalization(descriptionMap, getDescription(), "Description",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public Long getDuration() {
		return _duration;
	}

	@Override
	public void setDuration(Long duration) {
		_duration = duration;
	}

	@JSON
	@Override
	public int getCourseStatus() {
		return _courseStatus;
	}

	@Override
	public void setCourseStatus(int courseStatus) {
		_courseStatus = courseStatus;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(), Course.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public String[] getAvailableLanguageIds() {
		Set<String> availableLanguageIds = new TreeSet<String>();

		Map<Locale, String> courseNameMap = getCourseNameMap();

		for (Map.Entry<Locale, String> entry : courseNameMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> lecturerMap = getLecturerMap();

		for (Map.Entry<Locale, String> entry : lecturerMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> descriptionMap = getDescriptionMap();

		for (Map.Entry<Locale, String> entry : descriptionMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		return availableLanguageIds.toArray(new String[availableLanguageIds.size()]);
	}

	@Override
	public String getDefaultLanguageId() {
		String xml = getCourseName();

		if (xml == null) {
			return "";
		}

		Locale defaultLocale = LocaleUtil.getSiteDefault();

		return LocalizationUtil.getDefaultLanguageId(xml, defaultLocale);
	}

	@Override
	public void prepareLocalizedFieldsForImport() throws LocaleException {
		Locale defaultLocale = LocaleUtil.fromLanguageId(getDefaultLanguageId());

		Locale[] availableLocales = LocaleUtil.fromLanguageIds(getAvailableLanguageIds());

		Locale defaultImportLocale = LocalizationUtil.getDefaultImportLocale(Course.class.getName(), getPrimaryKey(),
				defaultLocale, availableLocales);

		prepareLocalizedFieldsForImport(defaultImportLocale);
	}

	@Override
	@SuppressWarnings("unused")
	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale) throws LocaleException {

		Locale defaultLocale = LocaleUtil.getSiteDefault();

		String modelDefaultLanguageId = getDefaultLanguageId();

		String courseName = getCourseName(defaultLocale);

		if (Validator.isNull(courseName)) {
			setCourseName(getCourseName(modelDefaultLanguageId), defaultLocale);
		} else {
			setCourseName(getCourseName(defaultLocale), defaultLocale, defaultLocale);
		}

		String lecturer = getLecturer(defaultLocale);

		if (Validator.isNull(lecturer)) {
			setLecturer(getLecturer(modelDefaultLanguageId), defaultLocale);
		} else {
			setLecturer(getLecturer(defaultLocale), defaultLocale, defaultLocale);
		}

		String description = getDescription(defaultLocale);

		if (Validator.isNull(description)) {
			setDescription(getDescription(modelDefaultLanguageId), defaultLocale);
		} else {
			setDescription(getDescription(defaultLocale), defaultLocale, defaultLocale);
		}
	}

	@Override
	public Course toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Course> escapedModelProxyProviderFunction = EscapedModelProxyProviderFunctionHolder._escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CourseImpl courseImpl = new CourseImpl();

		courseImpl.setCourseId(getCourseId());
		courseImpl.setGroupId(getGroupId());
		courseImpl.setCompanyId(getCompanyId());
		courseImpl.setUserId(getUserId());
		courseImpl.setUserName(getUserName());
		courseImpl.setCreateDate(getCreateDate());
		courseImpl.setModifiedDate(getModifiedDate());
		courseImpl.setCourseName(getCourseName());
		courseImpl.setLecturer(getLecturer());
		courseImpl.setDescription(getDescription());
		courseImpl.setDuration(getDuration());
		courseImpl.setCourseStatus(getCourseStatus());

		courseImpl.resetOriginalValues();

		return courseImpl;
	}

	@Override
	public int compareTo(Course course) {
		int value = 0;

		value = getCourseName().compareTo(course.getCourseName());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Course)) {
			return false;
		}

		Course course = (Course) obj;

		long primaryKey = course.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		} else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int) getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		CourseModelImpl courseModelImpl = this;

		courseModelImpl._originalGroupId = courseModelImpl._groupId;

		courseModelImpl._setOriginalGroupId = false;

		courseModelImpl._setModifiedDate = false;

		courseModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Course> toCacheModel() {
		CourseCacheModel courseCacheModel = new CourseCacheModel();

		courseCacheModel.courseId = getCourseId();

		courseCacheModel.groupId = getGroupId();

		courseCacheModel.companyId = getCompanyId();

		courseCacheModel.userId = getUserId();

		courseCacheModel.userName = getUserName();

		String userName = courseCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			courseCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			courseCacheModel.createDate = createDate.getTime();
		} else {
			courseCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			courseCacheModel.modifiedDate = modifiedDate.getTime();
		} else {
			courseCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		courseCacheModel.courseName = getCourseName();

		String courseName = courseCacheModel.courseName;

		if ((courseName != null) && (courseName.length() == 0)) {
			courseCacheModel.courseName = null;
		}

		courseCacheModel.lecturer = getLecturer();

		String lecturer = courseCacheModel.lecturer;

		if ((lecturer != null) && (lecturer.length() == 0)) {
			courseCacheModel.lecturer = null;
		}

		courseCacheModel.description = getDescription();

		String description = courseCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			courseCacheModel.description = null;
		}

		courseCacheModel.duration = getDuration();

		courseCacheModel.courseStatus = getCourseStatus();

		return courseCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Course, Object>> attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Course, Object>> entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Course, Object> attributeGetterFunction = entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((Course) this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Course, Object>> attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Course, Object>> entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Course, Object> attributeGetterFunction = entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Course) this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Course> _escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private long _courseId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _courseName;
	private String _courseNameCurrentLanguageId;
	private String _lecturer;
	private String _lecturerCurrentLanguageId;
	private String _description;
	private String _descriptionCurrentLanguageId;
	private Long _duration;
	private int _courseStatus;
	private long _columnBitmask;
	private Course _escapedModel;

}